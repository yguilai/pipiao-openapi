// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	wfDictFieldNames          = builder.RawFieldNames(&WfDict{})
	wfDictRows                = strings.Join(wfDictFieldNames, ",")
	wfDictRowsExpectAutoSet   = strings.Join(stringx.Remove(wfDictFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	wfDictRowsWithPlaceHolder = strings.Join(stringx.Remove(wfDictFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cachePipiaoWfDictIdPrefix = "cache:pipiao:wfDict:id:"
)

type (
	wfDictModel interface {
		Insert(ctx context.Context, data *WfDict) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*WfDict, error)
		Update(ctx context.Context, data *WfDict) error
		Delete(ctx context.Context, id int64) error
	}

	defaultWfDictModel struct {
		sqlc.CachedConn
		table string
	}

	WfDict struct {
		Id         int64     `db:"id"`          // 自增id
		Raw        string    `db:"raw"`         // 原始内容
		Target     string    `db:"target"`      // 翻译结果
		Type       int64     `db:"type"`        // 翻译类型
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 更新时间
	}
)

func newWfDictModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultWfDictModel {
	return &defaultWfDictModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`wf_dict`",
	}
}

func (m *defaultWfDictModel) Delete(ctx context.Context, id int64) error {
	pipiaoWfDictIdKey := fmt.Sprintf("%s%v", cachePipiaoWfDictIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, pipiaoWfDictIdKey)
	return err
}

func (m *defaultWfDictModel) FindOne(ctx context.Context, id int64) (*WfDict, error) {
	pipiaoWfDictIdKey := fmt.Sprintf("%s%v", cachePipiaoWfDictIdPrefix, id)
	var resp WfDict
	err := m.QueryRowCtx(ctx, &resp, pipiaoWfDictIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", wfDictRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWfDictModel) Insert(ctx context.Context, data *WfDict) (sql.Result, error) {
	pipiaoWfDictIdKey := fmt.Sprintf("%s%v", cachePipiaoWfDictIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, wfDictRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Raw, data.Target, data.Type)
	}, pipiaoWfDictIdKey)
	return ret, err
}

func (m *defaultWfDictModel) Update(ctx context.Context, data *WfDict) error {
	pipiaoWfDictIdKey := fmt.Sprintf("%s%v", cachePipiaoWfDictIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, wfDictRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Raw, data.Target, data.Type, data.Id)
	}, pipiaoWfDictIdKey)
	return err
}

func (m *defaultWfDictModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePipiaoWfDictIdPrefix, primary)
}

func (m *defaultWfDictModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", wfDictRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultWfDictModel) tableName() string {
	return m.table
}
