// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	wfEntryFieldNames          = builder.RawFieldNames(&WfEntry{})
	wfEntryRows                = strings.Join(wfEntryFieldNames, ",")
	wfEntryRowsExpectAutoSet   = strings.Join(stringx.Remove(wfEntryFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	wfEntryRowsWithPlaceHolder = strings.Join(stringx.Remove(wfEntryFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheWfEntryIdPrefix         = "cache:wfEntry:id:"
	cacheWfEntryUniqueNamePrefix = "cache:wfEntry:uniqueName:"
)

type (
	wfEntryModel interface {
		Insert(ctx context.Context, data *WfEntry) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*WfEntry, error)
		FindOneByUniqueName(ctx context.Context, uniqueName string) (*WfEntry, error)
		Update(ctx context.Context, data *WfEntry) error
		Delete(ctx context.Context, id int64) error
	}

	defaultWfEntryModel struct {
		sqlc.CachedConn
		table string
	}

	WfEntry struct {
		Id         int64     `db:"id"`          // 自增id
		UniqueName string    `db:"unique_name"` // wf词条全局唯一名称
		Category   string    `db:"category"`    // 词条分类
		Name       string    `db:"name"`        // 词条英文名
		Tradable   int64     `db:"tradable"`    // 是否能交易
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 更新时间
	}
)

func newWfEntryModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultWfEntryModel {
	return &defaultWfEntryModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`wf_entry`",
	}
}

func (m *defaultWfEntryModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	wfEntryIdKey := fmt.Sprintf("%s%v", cacheWfEntryIdPrefix, id)
	wfEntryUniqueNameKey := fmt.Sprintf("%s%v", cacheWfEntryUniqueNamePrefix, data.UniqueName)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, wfEntryIdKey, wfEntryUniqueNameKey)
	return err
}

func (m *defaultWfEntryModel) FindOne(ctx context.Context, id int64) (*WfEntry, error) {
	wfEntryIdKey := fmt.Sprintf("%s%v", cacheWfEntryIdPrefix, id)
	var resp WfEntry
	err := m.QueryRowCtx(ctx, &resp, wfEntryIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", wfEntryRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWfEntryModel) FindOneByUniqueName(ctx context.Context, uniqueName string) (*WfEntry, error) {
	wfEntryUniqueNameKey := fmt.Sprintf("%s%v", cacheWfEntryUniqueNamePrefix, uniqueName)
	var resp WfEntry
	err := m.QueryRowIndexCtx(ctx, &resp, wfEntryUniqueNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `unique_name` = ? limit 1", wfEntryRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, uniqueName); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWfEntryModel) Insert(ctx context.Context, data *WfEntry) (sql.Result, error) {
	wfEntryIdKey := fmt.Sprintf("%s%v", cacheWfEntryIdPrefix, data.Id)
	wfEntryUniqueNameKey := fmt.Sprintf("%s%v", cacheWfEntryUniqueNamePrefix, data.UniqueName)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, wfEntryRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UniqueName, data.Category, data.Name, data.Tradable)
	}, wfEntryIdKey, wfEntryUniqueNameKey)
	return ret, err
}

func (m *defaultWfEntryModel) Update(ctx context.Context, newData *WfEntry) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	wfEntryIdKey := fmt.Sprintf("%s%v", cacheWfEntryIdPrefix, data.Id)
	wfEntryUniqueNameKey := fmt.Sprintf("%s%v", cacheWfEntryUniqueNamePrefix, data.UniqueName)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, wfEntryRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UniqueName, newData.Category, newData.Name, newData.Tradable, newData.Id)
	}, wfEntryIdKey, wfEntryUniqueNameKey)
	return err
}

func (m *defaultWfEntryModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheWfEntryIdPrefix, primary)
}

func (m *defaultWfEntryModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", wfEntryRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultWfEntryModel) tableName() string {
	return m.table
}
