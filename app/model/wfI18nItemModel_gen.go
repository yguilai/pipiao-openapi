// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	wfI18nItemFieldNames          = builder.RawFieldNames(&WfI18nItem{})
	wfI18nItemRows                = strings.Join(wfI18nItemFieldNames, ",")
	wfI18nItemRowsExpectAutoSet   = strings.Join(stringx.Remove(wfI18nItemFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	wfI18nItemRowsWithPlaceHolder = strings.Join(stringx.Remove(wfI18nItemFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheWfI18nItemIdPrefix             = "cache:wfI18nItem:id:"
	cacheWfI18nItemUniqueNameLangPrefix = "cache:wfI18nItem:uniqueName:lang:"
)

type (
	wfI18nItemModel interface {
		Insert(ctx context.Context, data *WfI18nItem) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*WfI18nItem, error)
		FindOneByUniqueNameLang(ctx context.Context, uniqueName string, lang string) (*WfI18nItem, error)
		Update(ctx context.Context, data *WfI18nItem) error
		Delete(ctx context.Context, id int64) error
	}

	defaultWfI18nItemModel struct {
		sqlc.CachedConn
		table string
	}

	WfI18nItem struct {
		Id         int64     `db:"id"`          // 自增id
		UniqueName string    `db:"unique_name"` // 词条键
		Lang       string    `db:"lang"`        // 语言缩写
		Name       string    `db:"name"`        // 词条名称
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 更新时间
	}
)

func newWfI18nItemModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultWfI18nItemModel {
	return &defaultWfI18nItemModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`wf_i18n_item`",
	}
}

func (m *defaultWfI18nItemModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	wfI18nItemIdKey := fmt.Sprintf("%s%v", cacheWfI18nItemIdPrefix, id)
	wfI18nItemUniqueNameLangKey := fmt.Sprintf("%s%v:%v", cacheWfI18nItemUniqueNameLangPrefix, data.UniqueName, data.Lang)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, wfI18nItemIdKey, wfI18nItemUniqueNameLangKey)
	return err
}

func (m *defaultWfI18nItemModel) FindOne(ctx context.Context, id int64) (*WfI18nItem, error) {
	wfI18nItemIdKey := fmt.Sprintf("%s%v", cacheWfI18nItemIdPrefix, id)
	var resp WfI18nItem
	err := m.QueryRowCtx(ctx, &resp, wfI18nItemIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", wfI18nItemRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWfI18nItemModel) FindOneByUniqueNameLang(ctx context.Context, uniqueName string, lang string) (*WfI18nItem, error) {
	wfI18nItemUniqueNameLangKey := fmt.Sprintf("%s%v:%v", cacheWfI18nItemUniqueNameLangPrefix, uniqueName, lang)
	var resp WfI18nItem
	err := m.QueryRowIndexCtx(ctx, &resp, wfI18nItemUniqueNameLangKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `unique_name` = ? and `lang` = ? limit 1", wfI18nItemRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, uniqueName, lang); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWfI18nItemModel) Insert(ctx context.Context, data *WfI18nItem) (sql.Result, error) {
	wfI18nItemIdKey := fmt.Sprintf("%s%v", cacheWfI18nItemIdPrefix, data.Id)
	wfI18nItemUniqueNameLangKey := fmt.Sprintf("%s%v:%v", cacheWfI18nItemUniqueNameLangPrefix, data.UniqueName, data.Lang)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, wfI18nItemRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UniqueName, data.Lang, data.Name)
	}, wfI18nItemIdKey, wfI18nItemUniqueNameLangKey)
	return ret, err
}

func (m *defaultWfI18nItemModel) Update(ctx context.Context, newData *WfI18nItem) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	wfI18nItemIdKey := fmt.Sprintf("%s%v", cacheWfI18nItemIdPrefix, data.Id)
	wfI18nItemUniqueNameLangKey := fmt.Sprintf("%s%v:%v", cacheWfI18nItemUniqueNameLangPrefix, data.UniqueName, data.Lang)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, wfI18nItemRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UniqueName, newData.Lang, newData.Name, newData.Id)
	}, wfI18nItemIdKey, wfI18nItemUniqueNameLangKey)
	return err
}

func (m *defaultWfI18nItemModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheWfI18nItemIdPrefix, primary)
}

func (m *defaultWfI18nItemModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", wfI18nItemRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultWfI18nItemModel) tableName() string {
	return m.table
}
